(window.webpackJsonp=window.webpackJsonp||[]).push([[126],{694:function(e,t,a){"use strict";a.r(t);var n=a(4),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"一-常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-常用命令"}},[e._v("#")]),e._v(" 一. 常用命令")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("nginx -s quit          "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#优雅停止nginx，有连接时会等连接请求完成再杀死worker进程  ")]),e._v("\nnginx -s stop          "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#快速停止或关闭Nginx")]),e._v("\nnginx -s reload        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#优雅重启，并重新载入配置文件nginx.conf")]),e._v("\nnginx -s reopen        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#重新打开日志文件，一般用于切割日志")]),e._v("\nnginx -v               "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#查看版本  ")]),e._v("\nnginx -t               "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#检查nginx的配置文件")]),e._v("\nnginx -h               "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#查看帮助信息")]),e._v("\nnginx -V               "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#详细版本信息，包括编译参数 ")]),e._v("\nnginx  -c filename     "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#指定配置文件")]),e._v("\n")])])]),a("h2",{attrs:{id:"二-nginx配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-nginx配置文件"}},[e._v("#")]),e._v(" 二. Nginx配置文件")]),e._v(" "),a("p",[e._v("配置文件默认为安装目录下的conf/nginx.conf，如果有使用到其他子配置文件，可以在nginx.conf中使用include 文件路径;的方式加载使用，比如server段，就可以单独写成一个配置文件，在http段下面使用include加载使用。\n如果使用yum类型的方式安装,那么配置文件在"),a("code",[e._v("/etc/nginx/")]),e._v("文件夹下，其中"),a("code",[e._v("conf.d")]),e._v("文件夹下为默认添加的conf。资源文件夹在"),a("code",[e._v("/usr/share/nginx/html/")]),e._v("目录下")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("...              #全局块\n \nevents {         #events块\n   ...\n}\n \nhttp      #http块\n{\n    ...   #http全局块\n    server        #server块\n    { \n        ...       #server全局块\n        location [PATTERN]   #location块\n        {\n            ...\n        }\n        location [PATTERN] \n        {\n            ...\n        }\n    }\n    server\n    {\n      ...\n    }\n    ...     #http全局块\n}\n")])])]),a("ul",[a("li",[e._v("全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。")]),e._v(" "),a("li",[e._v("events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。")]),e._v(" "),a("li",[e._v("http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。")]),e._v(" "),a("li",[e._v("server块：配置虚拟主机的相关参数，一个http中可以有多个server。")]),e._v(" "),a("li",[e._v("location块：配置请求的路由，以及各种页面的处理情况。\n配置示例:")])]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#user nginx;  #配置用户或者组，默认为nobody nobody。\n#worker_processes 2;  #允许生成的进程数，默认为1 可设置为auto，系统根据请求自动判断\n#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址\nerror_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg\nevents {\n    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on\n    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off\n    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport\n    worker_connections  1024;    #最大连接数，默认为512\n}\nhttp {\n    include       mime.types;   #文件扩展名与文件类型映射表\n    default_type  application/octet-stream; #默认文件类型，默认为text/plain\n    #access_log off; #取消服务日志   \n    log_format myFormat '$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for'; #自定义日志格式\n    access_log log/access.log myFormat;  #combined为日志格式的默认值\n    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。\n    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。\n    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。\n    # 隐藏nginx版本号，不再浏览显示\n    server_tokens off;\n\n    #gzip加速\n    gzip  on;\n    gzip_http_version 1.0;    # 指定http的版本\n    gzip_disable 'MSIE [1-6]';    # 禁止IE的1~6版本使用该功能\n    gzip_types application/javascript text/css image/jpeg image/png; \n\n    # 禁止ip访问，当有匹配时，就不会在向下匹配\n    # deny all;        # 拒绝所有\n    # allow 192.168.211.1;         # 允许192.168.211.1\n\n    # 用户访问限制\n    # auth_basic 'pls login:';        # 指定提示语\"pls login:\"\n    # auth_basic_user_file /usr/local/nginx/conf/userlist;        # 指定授权用户所在文件\n    \n    upstream mysvr {  \n      server 127.0.0.1:7878;\n      server 192.168.10.121:3333 backup;  #热备\n    }\n    error_page 404 https://www.baidu.com; #错误页\n    server {\n        keepalive_requests 120; #单连接请求上限次数。\n        listen       4545;   #监听端口\n        server_name  127.0.0.1;   #监听地址      \n        location  ~*^.+$ {       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。释义为：不区分大小写，以1个以上的 非换行符的字符 开始并结束\n           #root path;  #根目录\n           #index vv.txt;  #设置默认页\n           proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表\n           deny 127.0.0.1;  #拒绝的ip\n           allow 172.18.5.54; #允许的ip  \n           # 资源重定向，如访问http://shop.devops.com/index.html后会被重写为访问http://shop.devops.com/index.php，permanent表示永久重定向\n            rewrite /index.html /index.php permanent; \n            # expires 设置客户端缓存\n            expires 1h;\n            # 资源重定向，$request_filename为nginx的内置变量，表示资源文件路径\n            if (!-e $request_filename) {\n                rewrite ^(.*)$ /index.php?s=/$1 last;\n                break;\n            }\n            # 防盗链实现，所有不是从shop.devops.com跳转过去访问js|css|jpg|png文件的都被拦截，返回404\n            valid_referers shop.devops.com;\n            if ($invalid_referer) {\n                return 404;\n            }    \n        }\n    }\n}\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",[a("strong",[e._v("注：每个指令必须有分号结束")])])]),e._v(" "),a("h2",{attrs:{id:"三、配置文件详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、配置文件详解"}},[e._v("#")]),e._v(" 三、配置文件详解")]),e._v(" "),a("h3",{attrs:{id:"_2-1-全局块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-全局块"}},[e._v("#")]),e._v(" 2.1 全局块")]),e._v(" "),a("ul",[a("li",[a("h4",{attrs:{id:"配置运行nginx服务器用户（组）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置运行nginx服务器用户（组）"}},[e._v("#")]),e._v(" 配置运行Nginx服务器用户（组）")])])]),e._v(" "),a("p",[e._v("指令格式："),a("code",[e._v("user user [group];")]),a("br"),e._v("\n user：指定可以运行Nginx服务器的用户"),a("br"),e._v("\n group：可选项，可以运行Nginx服务器的用户组")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[a("strong",[e._v("注：如果user指令不配置或者配置为 user nobody nobody ，则默认所有用户都可以启动Nginx进程")])])]),e._v(" "),a("hr"),e._v(" "),a("ul",[a("li",[a("h4",{attrs:{id:"worker-process数配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#worker-process数配置"}},[e._v("#")]),e._v(" worker process数配置")])])]),e._v(" "),a("p",[e._v("Nginx服务器实现并发处理服务的关键，指令格式："),a("code",[e._v("worker_processes number | auto;")]),a("br"),e._v("\n number：Nginx进程最多可以产生的worker process数"),a("br"),e._v("\n auto：Nginx进程将自动检测\n原作者的话：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("As a general rule you need the only worker with large number of\nworker_connections, say 10,000 or 20,000.\nHowever, if nginx does CPU-intensive work as SSL or gzipping and\nyou have 2 or more CPU, then you may set worker_processes to be equal\nto CPU number.\nBesides, if you serve many static files and the total size of the files\nis bigger than memory, then you may increase worker_processes to\nutilize a full disk bandwidth.\nIgor Sysoev\n")])])]),a("p",[e._v("一般一个进程足够了，可以把连接数设得很大。\n如果有SSL、gzip这些比较消耗CPU的工作，而且是多核CPU的话，可以设为和CPU的数量一样。\n或者要处理很多很多的小文件，而且文件总大小比内存大很多的时候，也可以把进程数增加，\n以充分利用IO带宽（主要似乎是IO操作有block）")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[a("strong",[e._v("注：服务器是“多个CPU＋gzip+网站总文件大小大于内存”的环境，worker_processes设置为CPU个数的两倍比较好")])])]),e._v(" "),a("hr"),e._v(" "),a("ul",[a("li",[a("h4",{attrs:{id:"nginx进程pid存放路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx进程pid存放路径"}},[e._v("#")]),e._v(" Nginx进程PID存放路径")])])]),e._v(" "),a("p",[e._v("Nginx进程作为系统的守护进程运行，我们需要在某个文件中保存当前运行程序的主进程号，Nginx支持定义pid的存放路径，其指令为：pid，语法格式如下\n"),a("code",[e._v("pid file;")]),a("br"),e._v("\n file：存放路径和文件名称"),a("br"),e._v("\n默认存放在nginx安装目录logs下，名字为：nginx.pid")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[a("strong",[e._v("注：一般情况下，pid文件，都是在编译安装nginx的时候，通过 --pid-path=PATH，该PATH一定要使用绝对路径")])])]),e._v(" "),a("hr"),e._v(" "),a("ul",[a("li",[a("h4",{attrs:{id:"定义mime类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义mime类型"}},[e._v("#")]),e._v(" 定义MIME类型")])])]),e._v(" "),a("p",[e._v("在常用的浏览器中，可以显示的内容有html、xml、gif、flash等种类繁多的文本、媒体等资源，浏览器为区分这些资料，引用了MIME type，换言之，MIME type是网络资源的媒体类型"),a("br"),e._v("\n默认nginx配置文件")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("include mime.types;\ndefault_type application/octet-stream;\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" /etc/nginx/mime.types\n")])])]),a("p",[e._v("default_type配置了用来处理前端请求的MIME类型，其语法如下"),a("br"),e._v(" "),a("code",[e._v("default_type mime-type;")]),a("br"),e._v("\n其中mime-type一定要是types块中定义过，如果不设置这个，默认为text/plain")]),e._v(" "),a("hr"),e._v(" "),a("ul",[a("li",[a("h4",{attrs:{id:"自定义nginx的访问日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义nginx的访问日志"}},[e._v("#")]),e._v(" 自定义nginx的访问日志")])]),e._v(" "),a("li",[a("h5",{attrs:{id:"access-log指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#access-log指令"}},[e._v("#")]),e._v(" access_log指令")])])]),e._v(" "),a("p",[e._v("语法：")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];\naccess_log off;\n")])])]),a("p",[e._v("说明："),a("br"),e._v("\npath： 配置服务日志的文件存放的路径和名称"),a("br"),e._v("\nformat，可选项，自定义服务日志的格式字符串"),a("br"),e._v("\nsize：配置临时存放日志的内存缓存区大小"),a("br"),e._v("\n该指令可以配置在http块，server块，location块，默认如下:"),a("br"),e._v("\n#access_log logs/access.log main;")]),e._v(" "),a("ul",[a("li",[a("h5",{attrs:{id:"log-format指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#log-format指令"}},[e._v("#")]),e._v(" log_format指令")])])]),e._v(" "),a("p",[e._v("语法如下：\n"),a("code",[e._v("log_format name [escape=default|json] string ...")]),a("br"),e._v("\n说明："),a("br"),e._v("\nname：格式字符串的名字，默认为combined"),a("br"),e._v("\nstring： 服务日志的格式字符串，在定义过程中，nginx配置预设一些变量获取相关内容")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# log_format main \'$remote_addr - $remote_user [$time_local] "$request" \'\n# \'$status $body_bytes_sent "$http_referer" \'\n# \'"$http_user_agent" "$http_x_forwarded_for"\';\n')])])]),a("p",[e._v("参数具体说明如下：")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("参数")]),e._v(" "),a("th",[e._v("说明")]),e._v(" "),a("th",[e._v("示例")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("$remote_addr")]),e._v(" "),a("td",[e._v("客户端地址")]),e._v(" "),a("td",[e._v("10.2.18.231")])]),e._v(" "),a("tr",[a("td",[e._v("$remote_user")]),e._v(" "),a("td",[e._v("客户端用户名称")]),e._v(" "),a("td",[e._v("- -")])]),e._v(" "),a("tr",[a("td",[e._v("$time_local")]),e._v(" "),a("td",[e._v("访问时间和时区")]),e._v(" "),a("td",[e._v("07/Dec/2017:16:39:09 +0800")])]),e._v(" "),a("tr",[a("td",[e._v("$request")]),e._v(" "),a("td",[e._v("请求的URI和HTTP协议")]),e._v(" "),a("td",[e._v('"GET / HTTP/1.1"')])]),e._v(" "),a("tr",[a("td",[e._v("$http_host")]),e._v(" "),a("td",[e._v("请求的地址")]),e._v(" "),a("td",[e._v("www.a.com")])]),e._v(" "),a("tr",[a("td",[e._v("$status")]),e._v(" "),a("td",[e._v("HTTP响应状态码")]),e._v(" "),a("td",[e._v("200")])]),e._v(" "),a("tr",[a("td",[e._v("$body_bytes_sent")]),e._v(" "),a("td",[e._v("发送给客户端文件内容大小")]),e._v(" "),a("td",[e._v("612")])]),e._v(" "),a("tr",[a("td",[e._v("$http_referer")]),e._v(" "),a("td",[e._v("url跳转来源")]),e._v(" "),a("td",[e._v("-")])]),e._v(" "),a("tr",[a("td",[e._v("$http_user_agent")]),e._v(" "),a("td",[e._v("用户终端浏览器等信息")]),e._v(" "),a("td",[e._v('"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36"')])]),e._v(" "),a("tr",[a("td",[e._v("$upstream_addr")]),e._v(" "),a("td",[e._v("后台upstream的地址")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("$request_time")]),e._v(" "),a("td",[e._v("整个请求的时间")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("$upstream_response_time")]),e._v(" "),a("td",[e._v("请求过程中，upstream响应时间")]),e._v(" "),a("td")])])]),e._v(" "),a("h3",{attrs:{id:"_2-2-event块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-event块"}},[e._v("#")]),e._v(" 2.2 Event块")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("events {\n  accept_mutex on;             #设置网路连接序列化，防止惊群现象发生，默认为on\n  multi_accept on;             #设置一个进程是否同时接受多个网络连接，默认为off\n  #use epoll;                  #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport\n  worker_connections  1024;    #最大连接数，默认为512\n}\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",[a("strong",[e._v("注：惊群现象")]),a("br"),e._v("\n对于操作系统来说，多个进程/线程在等待同一资源时，其结果就是每当资源可用，所有的进程/线程都来竞争资源，会造成以下后果：")]),e._v(" "),a("ul",[a("li",[e._v("系统对用户进程/线程频繁的做无效的调度、上下文切换，系统性能大打折扣。")]),e._v(" "),a("li",[e._v("为了确保只有一个线程得到资源，用户必须对资源操作进行加锁保护，进一步加大了系统开销。")])])]),e._v(" "),a("p",[e._v("更多详情请参考"),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/51251700",title:"滴滴云",target:"_blank",rel:"noopener noreferrer"}},[e._v("Linux惊群效应之Nginx解决方案"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_2-3-http块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-http块"}},[e._v("#")]),e._v(" 2.3 http块")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("http{\n  include       mime.types;   #文件扩展名与文件类型映射表\n  default_type  application/octet-stream; #默认文件类型，默认为text/plain\n  #access_log off; #取消服务日志   \n  log_format myFormat '$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for'; #自定义格式\n  access_log log/access.log myFormat;  #combined为日志格式的默认值\n  sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。\n  sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。\n  keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。\n  # 隐藏nginx版本号，不再浏览显示\n  server_tokens off;\n  #gzip加速\n  #gzip  on;\n\n  upstream mysvr {  \n    server 127.0.0.1:7878;\n    server 192.168.10.121:3333 backup;  #热备\n  }\n  error_page 404 https://www.baidu.com; #错误页\n}\n")])])]),a("h3",{attrs:{id:"_2-4-server块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-server块"}},[e._v("#")]),e._v(" 2.4 server块")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server {\n  keepalive_requests 120; #单连接请求上限次数。\n  listen       4545;   #监听端口\n  server_name  127.0.0.1;   #监听地址      \n}\n")])])]),a("ul",[a("li",[a("h4",{attrs:{id:"_2-4-1-listen"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-1-listen"}},[e._v("#")]),e._v(" 2.4.1 listen")])])]),e._v(" "),a("p",[e._v("功能：指定监听端口\n案例：")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("listen 127.0.0.1:8000;\nlisten 127.0.0.1;\nlisten 8000;\nlisten *:8000;\nlisten localhost:8000;\nlisten 443 ssl;\n")])])]),a("ul",[a("li",[a("h4",{attrs:{id:"_2-4-2-server-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2-server-name"}},[e._v("#")]),e._v(" 2.4.2 server_name")])])]),e._v(" "),a("p",[e._v("功能：设置虚拟主机的名字（域名）\n案例："),a("br"),e._v(" "),a("code",[e._v("server_name 51pet.comwww.51pet.comm.51pet.com")])]),e._v(" "),a("p",[e._v("匹配法则：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("1）精确匹配")])]),e._v(" "),a("li",[a("p",[e._v("2）左侧通配符匹配 .test.com")])]),e._v(" "),a("li",[a("p",[e._v("3）右侧通配符匹配 mail.")])]),e._v(" "),a("li",[a("p",[e._v("4）正则表达式匹配检测")])]),e._v(" "),a("li",[a("h4",{attrs:{id:"_2-4-3-root"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-3-root"}},[e._v("#")]),e._v(" 2.4.3 root")])])]),e._v(" "),a("p",[e._v("功能：为请求设置根目录\n案例")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("root /usr/share/nginx/html\nlocation /i/ {\n  root /data/w3;\n}\n")])])]),a("ul",[a("li",[a("h4",{attrs:{id:"_2-4-4-alias"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-4-alias"}},[e._v("#")]),e._v(" 2.4.4 alias")])])]),e._v(" "),a("p",[e._v("语法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("alias path;\nlocation /i/ {\nalias /data/w3/images/;\n}\n")])])]),a("p",[e._v("on request of “/i/top.gif”, the file /data/w3/images/top.gif will be sent.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("location ~ ^/users/(.+.(?:gif|jpe?g|png))$ {\nalias /data/w3/images/$1;\n}\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",[a("strong",[e._v("alias和root区别")]),a("br"),e._v("\nnginx是通过alias设置虚拟目录，在nginx的配置中，alias目录和root目录是有区别的："),a("br"),e._v("\n1）alias指定的目录是准确的，即location匹配访问的path目录下的文件直接是在alias目录下查找的；"),a("br"),e._v("\n2）root指定的目录是location匹配访问的path目录的上一级目录,这个path目录一定要是真实存在root指定目录下的；"),a("br"),e._v('\n3）使用alias标签的目录块中不能使用rewrite的break（具体原因不明）；另外，alias指定的目录后面必须要加上"/"符号！！'),a("br"),e._v('\n4）alias虚拟目录配置中，location匹配的path目录如果后面不带"/"，那么访问的url地址中这个path目录后面加不加"/"不影响访问，访问时它会自动加上"/"；但是如果location匹配的path目录后面加上"/"，那么访问的url地址中这个path目录必须要加上"/"，访问时它不会自动加上"/"。如果不加上"/"，访问就会失败！'),a("br"),e._v('\n5）root目录配置中，location匹配的path目录后面带不带"/"，都不会影响访问。')])]),e._v(" "),a("ul",[a("li",[a("h4",{attrs:{id:"_2-4-5-index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-5-index"}},[e._v("#")]),e._v(" 2.4.5 index")])])]),e._v(" "),a("p",[e._v("功能：指定默认主页面")]),e._v(" "),a("p",[e._v("案例：")]),e._v(" "),a("p",[a("code",[e._v("index index.php index.html index.htm;")])]),e._v(" "),a("ul",[a("li",[a("h4",{attrs:{id:"_2-4-6-error-page"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-6-error-page"}},[e._v("#")]),e._v(" 2.4.6 error_page")])])]),e._v(" "),a("p",[e._v("语法：\n"),a("code",[e._v("error_page code ... [=[response]] uri;")])]),e._v(" "),a("p",[e._v("案例：")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("error_page 404 /404.html;\nerror_page 500 502 503 504 /50x.html;\nerror_page 404 =302 /404.html;\n")])])]),a("h3",{attrs:{id:"_2-5-location块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-location块"}},[e._v("#")]),e._v(" 2.5 location块")]),e._v(" "),a("p",[a("code",[e._v("location [=|~|~*|^~] /uri/ { … }")]),a("br"),e._v("\n语法规则：")]),e._v(" "),a("ul",[a("li",[e._v("= 开头表示精确匹配")]),e._v(" "),a("li",[e._v("^~ 开头表示uri以某个常规字符串开头，理解为匹配 url路径即可。nginx不对url做编码，因此请求为/static/20%/aa，可以被规则^~ /static/ /aa匹配到（注意是空格）。以xx开头")]),e._v(" "),a("li",[e._v("~ 开头表示区分大小写的正则匹配                     以xx结尾")]),e._v(" "),a("li",[e._v("~* 开头表示不区分大小写的正则匹配                以xx结尾")]),e._v(" "),a("li",[e._v("!~和!~*分别为区分大小写不匹配及不区分大小写不匹配 的正则")]),e._v(" "),a("li",[e._v("/ 通用匹配，任何请求都会匹配到。\n多个location配置的情况下匹配顺序为:"),a("br"),e._v("\n首先精确匹配 =-》其次以xx开头匹配^~-》然后是按文件中顺序的正则匹配-》最后是交给 / 通用匹配。\n当有匹配成功时候，停止匹配，按当前匹配规则处理请求。")])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[a("strong",[e._v("注：文件中顺序的正则匹配从前缀最长的开始找")])])]),e._v(" "),a("ul",[a("li",[a("h4",{attrs:{id:"_2-5-1-rewrite语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1-rewrite语法"}},[e._v("#")]),e._v(" 2.5.1 ReWrite语法")])]),e._v(" "),a("li",[e._v("last – 基本上都用这个Flag。")]),e._v(" "),a("li",[e._v("break – 中止Rewirte，不在继续匹配")]),e._v(" "),a("li",[e._v("redirect – 返回临时重定向的HTTP状态302")]),e._v(" "),a("li",[e._v("permanent – 返回永久重定向的HTTP状态301")]),e._v(" "),a("li",[a("h4",{attrs:{id:"_2-5-2-try-files"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-2-try-files"}},[e._v("#")]),e._v(" 2.5.2 Try_files")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("location /images/ {\n    root /opt/html/;\n    try_files $uri   $uri/  /images/default.gif; \n}\n")])])]),a("p",[e._v("比如 请求 127.0.0.1/images/test.gif 会依次查找")]),e._v(" "),a("ol",[a("li",[e._v("文件/opt/html/images/test.gif")]),e._v(" "),a("li",[e._v("文件夹 /opt/html/images/test.gif/下的index文件")]),e._v(" "),a("li",[e._v("请求127.0.0.1/images/default.gif")])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[a("strong",[e._v("如果不写上 $uri/，当直接访问一个目录路径时，并不会去匹配目录下的索引页  即 访问127.0.0.1/images/ 不会去访问  127.0.0.1/images/index.html")])])]),e._v(" "),a("p",[a("em",[e._v("其他配置或调优请参考"),a("a",{attrs:{href:"https://www.kancloud.cn/louis1986/nginx-web",title:"看云",target:"_blank",rel:"noopener noreferrer"}},[e._v("nginx手册"),a("OutboundLink")],1)])]),e._v(" "),a("p",[a("em",[e._v("更多详情请参考"),a("a",{attrs:{href:"http://nginx.org/en/docs/",title:"NGINX",target:"_blank",rel:"noopener noreferrer"}},[e._v("Nginx官方文档"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);