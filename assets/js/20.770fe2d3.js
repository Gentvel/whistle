(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{534:function(s,a,t){s.exports=t.p+"assets/img/JVM.83a321c5.png"},535:function(s,a,t){s.exports=t.p+"assets/img/verifyClass.e42c77b3.png"},536:function(s,a,t){s.exports=t.p+"assets/img/prepare.94366ead.png"},655:function(s,a,t){"use strict";t.r(a);var n=t(4),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"一、jvm基本概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、jvm基本概念"}},[s._v("#")]),s._v(" 一、JVM基本概念")]),s._v(" "),n("p",[s._v(" JVM "),n("em",[s._v("（Java Virtual Machine）")]),s._v(" 是可运行java代码的假想计算机，包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收、堆和一个存储方法域。JVM试运行在操作系统上的，它与硬件没有直接的交互。")]),s._v(" "),n("center",[n("p",[n("img",{attrs:{src:t(534),alt:"JVM"}})])]),s._v(" "),n("h2",{attrs:{id:"二、代码执行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、代码执行"}},[s._v("#")]),s._v(" 二、代码执行")]),s._v(" "),n("h3",{attrs:{id:"_2-1-类加载过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-类加载过程"}},[s._v("#")]),s._v(" 2.1 类加载过程")]),s._v(" "),n("p",[s._v("类的加载过程有：加载--\x3e验证--\x3e准备--\x3e解析--\x3e初始化,其中，验证、准备和解析并称为连接")]),s._v(" "),n("h4",{attrs:{id:"_2-1-1-加载类的条件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-加载类的条件"}},[s._v("#")]),s._v(" 2.1.1 加载类的条件")]),s._v(" "),n("p",[s._v("  Class只有在必须要使用的时候才会被装载，JVM不会无条件去装载Class类型。以下几种情况发生时可以触发JVM加载：")]),s._v(" "),n("ul",[n("li",[s._v("创建实例，比如：new、反射、克隆、序列化。")]),s._v(" "),n("li",[s._v("调用类的静态方法")]),s._v(" "),n("li",[s._v("使用类的静态变量（final常量除外）")]),s._v(" "),n("li",[s._v("初始化子类时，要求先初始化父类")]),s._v(" "),n("li",[s._v("main()方法存在的类")])]),s._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[s._v("  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I am Father"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Child")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I am children"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Child")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("p",[s._v("输出：")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("I am Father\nI am children\n")])])]),n("p",[s._v("由输出可知，系统首先会加载父类，然后再装载子类，符合主动装载的两个条件：new的时候会装载类、在初始化子类的时候会先初始化父类")]),s._v(" "),n("p",[s._v("被动引用不会导致类的装载")]),s._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[s._v("    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I am Father"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" value "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"123"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Child")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I am children"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Child")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("p",[s._v("输出")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("I am Father\n123\n")])])]),n("p",[s._v("使用子类去调用父类中的变量，但是子类并没有被初始化，只有父类被初始化。所以在引用一个静态变量时，只有直接定义该变量的类会被初始化。")]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",[n("strong",[s._v("注：虽然Child类没有被初始化，但是此时的Child类是已经被系统加载了，只是没有进入到初始化阶段")])])]),s._v(" "),n("p",[s._v("使用 "),n("code",[s._v("-XX:+TraceClassLoading")]),s._v("参数运行这段代码，就会得到下面的日志：")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("[0.822s][info   ][class,load] com.learn.jvm.classload.ClassLoadTest$Father source: file:/E:/learn/demo/target/classes/\n[0.822s][info   ][class,load] com.learn.jvm.classload.ClassLoadTest$Child source: file:/E:/learn/demo/target/classes/\nI am Father\n123\n")])])]),n("p",[s._v("可以明确的看出类是已经被加载了，只是没有被初始化。")]),s._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[s._v("    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I am Father"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" value "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"123"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Child")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I am children"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Child")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("p",[s._v("输出：")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("[0.561s][info   ][class,load] com.learn.jvm.classload.ClassLoadTest source: file:/E:/learn/demo/target/classes/\n123\n")])])]),n("p",[s._v("由以上代码可以看出：当调用类的静态常量的时候，是不会装载这个类的，但这个类是会被加载，只是没到初始化阶段")]),s._v(" "),n("h3",{attrs:{id:"_2-2-加载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-加载"}},[s._v("#")]),s._v(" 2.2 加载")]),s._v(" "),n("p",[s._v("加载类处于类装载的第一个阶段。在加载类的时候，JVM必须完成以下工作：")]),s._v(" "),n("ul",[n("li",[s._v("通过类的全名，获取类的二进制数据流")]),s._v(" "),n("li",[s._v("解析类的二进制数据流为方法区内的数据结构")]),s._v(" "),n("li",[s._v("创建加载类的java.lang.Class类实例，表示为该类型\n在获取到类的二进制信息后，JVM就会处理这些数据并生成该类的java.lang.Class类实例，可以使用反射获取该数据，例：")])]),s._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[s._v("  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" aClass "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("forName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"java.lang.String"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Method")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" declaredMethods "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" aClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getDeclaredMethods")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Stream")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("of")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("declaredMethods"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("forEach")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),n("h3",{attrs:{id:"_2-3-验证"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-验证"}},[s._v("#")]),s._v(" 2.3 验证")]),s._v(" "),n("p",[s._v("这一步是保证加载的字节码是合理、合法并符合规范的，如下：")]),s._v(" "),n("center",[n("p",[n("img",{attrs:{src:t(535),alt:"Verify"}})])]),s._v(" "),n("h3",{attrs:{id:"_2-4-准备"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-准备"}},[s._v("#")]),s._v(" 2.4 准备")]),s._v(" "),n("p",[s._v("在这个阶段，JVM会为这个类分配相应的内存空间，设置初始值。\n如果存在常量，那么常量也会在准备阶段赋值，这个属于变量的初始化。")]),s._v(" "),n("center",[n("p",[n("img",{attrs:{src:t(536),alt:"Prepare"}})])]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",[n("strong",[s._v("注：java并不支持boolean类型，对于boolean类型，内部实现其实是int，由于int的默认值是0，boolean的默认值也就变成了false")])])]),s._v(" "),n("h3",{attrs:{id:"_2-5-解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-解析"}},[s._v("#")]),s._v(" 2.5 解析")]),s._v(" "),n("p",[s._v("解析阶段就是将类、接口、属性和方法的符号引用转换成直接引用。")]),s._v(" "),n("ul",[n("li",[s._v("符号引用："),n("br"),s._v("\n一些字面量的引用，也就是一些类、接口、方法的直接信息，但是并不能通过该信息去获取直接地址（也就是直接引用）。")]),s._v(" "),n("li",[s._v("直接引用："),n("br"),s._v("\n通过解析操作，得到类、接口、方法等在内存中的指针或偏移量。\n直接引用存在的话，系统中肯定存在该类，但是自由符号引用时，不一定存在该对象")])]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",[n("strong",[s._v("计算机汇编语言中的偏移量定义为：把存储单元的实际地址与其所在段的段地址之间的距离称为段内偏移，也称为“有效地址或偏移量”。")])])]),s._v(" "),n("h3",{attrs:{id:"_2-6-初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-初始化"}},[s._v("#")]),s._v(" 2.6 初始化")]),s._v(" "),n("p",[s._v("如果前面的步骤没有出错，那么类可以顺利的装载到系统中。初始化的重要工作是执行类的初始化方法"),n("code",[s._v("client")]),s._v("，该方法是由编译器自动生成的，由类的静态成员变量赋值语句以及static语句块合并产生")]),s._v(" "),n("h2",{attrs:{id:"三、类加载器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、类加载器"}},[s._v("#")]),s._v(" 三、类加载器")]),s._v(" "),n("p",[s._v("Java中所有的类都是由ClassLoader进行加载的，它负责通过各种方式将Class文件的二进制数据读入系统中，然后交给JVM进行连接和初始化。")]),s._v(" "),n("h3",{attrs:{id:"_3-1-classloader分类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-classloader分类"}},[s._v("#")]),s._v(" 3.1 ClassLoader分类")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("启动类加载器 （Bootstrap ClassLoader）完全由C代码完成，在java中没有对象与之对应。负责加载$JAVA_HOME中jre/lib/rt.jar里所有的class")])]),s._v(" "),n("li",[n("p",[s._v("拓展类加载器 （Extension ClassLoader）负责加载JRE的扩展目录，lib/ext或者由java.ext.dirs系统属性指定的目录中的JAR包的类。由Java语言实现，父类加载器为null。")])]),s._v(" "),n("li",[n("p",[s._v("应用类/系统类加载器 （Appliction ClassLoader）负责在JVM启动时加载来自Java命令的-classpath选项、java.class.path系统属性，或者CLASSPATH换将变量所指定的JAR包和类路径。\n类加载器加载Class大致要经过如下8个步骤：")]),s._v(" "),n("ol",[n("li",[s._v("检测此Class是否载入过，即在缓冲区中是否有此Class，如果有直接进入第8步，否则进入第2步。")]),s._v(" "),n("li",[s._v("如果没有父类加载器，则要么Parent是根类加载器，要么本身就是根类加载器，则跳到第4步，如果父类加载器存在，则进入第3步。")]),s._v(" "),n("li",[s._v("请求使用父类加载器去载入目标类，如果载入成功则跳至第8步，否则接着执行第5步。")]),s._v(" "),n("li",[s._v("请求使用根类加载器去载入目标类，如果载入成功则跳至第8步，否则跳至第7步。")]),s._v(" "),n("li",[s._v("当前类加载器尝试寻找Class文件，如果找到则执行第6步，如果找不到则执行第7步。")]),s._v(" "),n("li",[s._v("从文件中载入Class，成功后跳至第8步。")]),s._v(" "),n("li",[s._v("抛出ClassNotFountException异常。")]),s._v(" "),n("li",[s._v("返回对应的java.lang.Class对象。")])])]),s._v(" "),n("li",[n("p",[s._v("自定义类加载器")])])]),s._v(" "),n("h3",{attrs:{id:"_3-2-类加载机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-类加载机制"}},[s._v("#")]),s._v(" 3.2 类加载机制")]),s._v(" "),n("ul",[n("li",[s._v("全盘负责：所谓全盘负责，就是当一个类加载器负责加载某个Class时，该Class所依赖和引用其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入。")]),s._v(" "),n("li",[s._v("双亲委派：所谓的双亲委派，则是先让父类加载器试图加载该Class，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类。通俗的讲，就是某个特定的类加载器在接到加载类的请求时，首先将加载任务委托给父加载器，依次递归，如果父加载器可以完成类加载任务，就成功返回；只有父加载器无法完成此加载任务时，才自己去加载。")]),s._v(" "),n("li",[s._v("缓存机制。缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区中搜寻该Class，只有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓冲区中。这就是为很么修改了Class后，必须重新启动JVM，程序所做的修改才会生效的原因。")])])],1)}),[],!1,null,null,null);a.default=e.exports}}]);