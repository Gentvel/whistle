(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{546:function(t,a,s){t.exports=s.p+"assets/img/JVMRuntimeData.91e843d5.png"},547:function(t,a,s){t.exports=s.p+"assets/img/heap.c4125e4d.png"},659:function(t,a,s){"use strict";s.r(a);var n=s(4),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"一、运行时数据区"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、运行时数据区"}},[t._v("#")]),t._v(" 一、运行时数据区")]),t._v(" "),n("center",[n("p",[n("img",{attrs:{src:s(546),alt:"JVM Runtime"}})])]),t._v(" "),n("h3",{attrs:{id:"_1-1-程序计数器（线程私有）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-程序计数器（线程私有）"}},[t._v("#")]),t._v(" 1.1 程序计数器（线程私有）")]),t._v(" "),n("p",[t._v("也叫PC寄存器，JVM会为每个java线程创建PC寄存器。在任意时刻，一个java线程总是在执行一个方法，这个正在被执行的方法称为当前方法。如果当前方法不是本地方法，PC寄存器就会指向当前正在被执行的指令。如果当前方法是本地方法，那么PC寄存器的值就是undifined。这个内存区域是唯一一个在虚拟机中没有规定任何OutOfMemoryError情况的区域。")]),t._v(" "),n("h3",{attrs:{id:"_1-2-方法区（线程共享）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-方法区（线程共享）"}},[t._v("#")]),t._v(" 1.2 方法区（线程共享）")]),t._v(" "),n("p",[t._v("在类加载器加载完类后，会将加载的类信息存放在方法区中。该区除了类信息外，还可能会存放运行时常量池信息，包括字符串字面量和数字常量（这部分常量信息是Class文件中常量池部分的内存映射）")]),t._v(" "),n("h3",{attrs:{id:"_1-3-虚拟机栈（线程私有）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-虚拟机栈（线程私有）"}},[t._v("#")]),t._v(" 1.3 虚拟机栈（线程私有）")]),t._v(" "),n("p",[t._v("描述java方法执行的内存模型，每个方法在执行的同时会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。")]),t._v(" "),n("h3",{attrs:{id:"_1-4-堆（线程共享）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-堆（线程共享）"}},[t._v("#")]),t._v(" 1.4 堆（线程共享）")]),t._v(" "),n("p",[t._v("是被线程共享的一块内存区域，创建的对象和数组都保存在 Java 堆内存中，也是垃圾收集器进行垃圾收集的最重要的内存区域。由于现代 VM 采用分代收集算法, 因此 Java 堆从 GC 的角度还可以\n细分为: 新生代(Eden 区、From Survivor 区和 To Survivor 区)和老年代。")]),t._v(" "),n("h3",{attrs:{id:"_1-5-本地方法栈（线程私有）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-本地方法栈（线程私有）"}},[t._v("#")]),t._v(" 1.5 本地方法栈（线程私有）")]),t._v(" "),n("p",[t._v("与虚拟机栈类似，调用的是native方法服务。")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",[t._v("注：HotSpot VM直接就把本地方法栈和虚拟机栈合二为一")])]),t._v(" "),n("h2",{attrs:{id:"二、栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、栈"}},[t._v("#")]),t._v(" 二、栈")]),t._v(" "),n("p",[t._v("每次函数调用都会生成对应的栈帧，从而占用一定的栈空间，因此，如果栈空间不足，那么函数调用就无法继续下去。当请求栈的深度大于最大可用栈深度时，系统就会抛出StackOverflowError栈溢出错误。\n可用"),n("code",[t._v("-Xss")]),t._v("来指定线程最大栈空间，这个参数也直接决定了函数调用的最大深度如："),n("code",[t._v("-Xms20m -Xss512k")])]),t._v(" "),n("h3",{attrs:{id:"_2-1-局部变量表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-局部变量表"}},[t._v("#")]),t._v(" 2.1 局部变量表")]),t._v(" "),n("p",[t._v("它用于保存函数的参数以及局部变量。局部变量表中的变量旨在当前函数调用中有效，当函数调用结束后，随着函数栈帧的销毁，局部变量表也会随之销毁。")]),t._v(" "),n("h3",{attrs:{id:"_2-2-操作数栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-操作数栈"}},[t._v("#")]),t._v(" 2.2 操作数栈")]),t._v(" "),n("p",[t._v("主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间。操作数栈也是一个先进先出的数据结构，只支持入栈和出战两种操作。")]),t._v(" "),n("h3",{attrs:{id:"_2-3-帧数据区"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-帧数据区"}},[t._v("#")]),t._v(" 2.3 帧数据区")]),t._v(" "),n("p",[t._v("该区支持常量池解析、正常方法返回和异常处理等。")]),t._v(" "),n("h3",{attrs:{id:"_2-4-栈上分配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-栈上分配"}},[t._v("#")]),t._v(" 2.4 栈上分配")]),t._v(" "),n("p",[t._v("栈上分配时JVM提供的一种优化技术，它的基本思想是，对于那些线程私有的对象，可以将它们打散分配在栈上，而不是分配在堆上。分配在栈上的好处是可以在函数调用结束后自行销毁，而不需要垃圾回收器的介入，提高系统的性能。\n栈上分配的一个技术基础是进行逃逸分析。"),n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/39604934",target:"_blank",rel:"noopener noreferrer"}},[t._v("逃逸分析"),n("OutboundLink")],1),t._v("的目的是判断对象的作用域是否有可能逃逸出函数体。如下代码显示了一个逃逸的对象：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//逃逸对象")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" u"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    u "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//非逃逸对象")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" cc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("上述代码的cc是以局部变量的形式存在，并且该对象并没有被方法返回，或者出现任何形式的公开，因此，它并未发生逃逸，所以对于这种情况，虚拟机就有可能将cc分配在栈上，而不是在堆上。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" user "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    user"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    user"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zhangsan "')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" l "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentTimeMillis")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentTimeMillis")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("l"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("参数：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("-server\n-Xmx10m\n-Xms10m\n-XX:+DoEscapeAnalysis\n-Xlog:gc\n-XX:-UseTLAB\n-XX:+EliminateAllocations\n")])])]),n("p",[t._v("使用-server执行程序，只有在server模式下，才可以启用逃逸分析。\n程序执行完后，没有任何形式的GC输出，程序执行就完毕了。说明在执行过程中，User对象的分配被优化。")]),t._v(" "),n("h2",{attrs:{id:"三、方法区"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、方法区"}},[t._v("#")]),t._v(" 三、方法区")]),t._v(" "),n("p",[t._v("用于保存系统类信息，比如类的字段、方法、常量池等。方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，会抛出内存溢出的错误。\n在JDK8之前，方法区可以理解为永久代，使用参数"),n("code",[t._v("-XX:PermSize")]),t._v("和"),n("code",[t._v("-XX:MaxPermSize")]),t._v("指定，默认情况下，MaxPermSize为64MB JDK8之后，改为元空间，可以使用参数"),n("code",[t._v("-XX:MaxMetaspaceSize")]),t._v("指定，这是一块堆外内存。和永久代不同，如果不指定大小虚拟机会耗尽所有可用的系统内存。")]),t._v(" "),n("h3",{attrs:{id:"_3-1-运行时常量池"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-运行时常量池"}},[t._v("#")]),t._v(" 3.1 运行时常量池")]),t._v(" "),n("p",[t._v("运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述外，还有一部分是常量池表，用于存放编译器生成的各种字面量与符号的引用。当然，这个区域也会出现OutOfMemoryError。")]),t._v(" "),n("p",[n("code",[t._v("String::intern()")]),t._v("是一个本地方法，它的作用是如果字符串常量池中已经包含一个等于此String对象的\n字符串，则返回代表池中这个字符串的String对象的引用；否则，会将此String对象包含的字符串添加\n到常量池中，并且返回此String对象的引用。")]),t._v(" "),n("h2",{attrs:{id:"四、堆"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、堆"}},[t._v("#")]),t._v(" 四、堆")]),t._v(" "),n("p",[t._v("Java堆和Java应用程序是关系最为密切的内存空间，几乎所有的对象都存放在堆中。并且Java堆是完全自动化管理的，通过垃圾回收机制，垃圾对象会被自动清理。")]),t._v(" "),n("center",[n("p",[n("img",{attrs:{src:s(547),alt:"HEAP"}})])]),t._v(" "),n("h3",{attrs:{id:"_4-1-新生代"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-新生代"}},[t._v("#")]),t._v(" 4.1 新生代")]),t._v(" "),n("p",[t._v("用来存放新生的对象，一般占用堆的1/3空间。由于频繁的创建对象，所以新生代会频繁触发MinorGC进行垃圾回收。\n新生代又分为Eden区、ServivorFrom、ServivorTo三个区")]),t._v(" "),n("h4",{attrs:{id:"_4-1-1-eden区"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-eden区"}},[t._v("#")]),t._v(" 4.1.1 Eden区")]),t._v(" "),n("p",[t._v("java新对象的出生地(如果新创建的对象占用内存很大，则直接分配到老年代)。当Eden区内存不够的时候就会出发MinorGC，对新生代进行垃圾回收")]),t._v(" "),n("h4",{attrs:{id:"_4-1-2-servivorform"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-servivorform"}},[t._v("#")]),t._v(" 4.1.2 ServivorForm")]),t._v(" "),n("p",[t._v("上一次 GC 的幸存者，作为这一次 GC 的被扫描者。")]),t._v(" "),n("h4",{attrs:{id:"_4-1-3-servivorto"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-3-servivorto"}},[t._v("#")]),t._v(" 4.1.3 ServivorTo")]),t._v(" "),n("p",[t._v("保留了一次 MinorGC 过程中的幸存者。")]),t._v(" "),n("h3",{attrs:{id:"_4-2-老年代"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-老年代"}},[t._v("#")]),t._v(" 4.2 老年代")]),t._v(" "),n("p",[t._v("主要存放应用程序中生命周期长的内存对象。\n老年代的对象比较稳定，所以MajorGC不会频繁执行。在进行MajorGC前一般都会先进行MinorGC，使得新生代的对象晋升为老年代对象导致空间不够时才会触发。当无法找到足够大的连续空间给新创建的大对象时也会提前出发MajorGC进行垃圾回收腾出空间。")]),t._v(" "),n("h3",{attrs:{id:"_4-3-永久代"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-永久代"}},[t._v("#")]),t._v(" 4.3 永久代")]),t._v(" "),n("p",[t._v("主要存放Class和元数据信息，主要为方法区里面的内容。Java8之后改成为元空间，使用对外内存。这是因为永久代的空间有限，在大量使用字符串的场景下会导致 OutOfMemoryError 错误。")]),t._v(" "),n("h2",{attrs:{id:"五-直接内存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五-直接内存"}},[t._v("#")]),t._v(" 五 直接内存")]),t._v(" "),n("p",[t._v("直接内存并不是虚拟机运行时数据区的一部分，也不是java虚拟机规范中定义的内存区域。但是这个区域被频繁的使用，也会出现OutOfMemoryError错误。在JDK1.4之后，新加入了NIO类，引入了通道"),n("code",[t._v("channel")]),t._v("和缓冲区"),n("code",[t._v("Buffer")]),t._v("的I/O方式，它可以使用Native函数直接分配堆外内存，通过DirectByteBuffer对象作为这块内存的引用直接操作。这样能提高性能，避免在Native堆和Java堆频繁复制。")])],1)}),[],!1,null,null,null);a.default=r.exports}}]);