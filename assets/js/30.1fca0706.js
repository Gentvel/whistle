(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{484:function(t,_,v){t.exports=v.p+"assets/img/tree.9544baf2.png"},590:function(t,_,v){"use strict";v.r(_);var r=v(4),e=Object(r.a)({},(function(){var t=this,_=t.$createElement,r=t._self._c||_;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"树的定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#树的定义"}},[t._v("#")]),t._v(" 树的定义")]),t._v(" "),r("p",[t._v("树是n(n≥0)个节点的有限集T，并且当n＞0时满足下列条件：")]),t._v(" "),r("ol",[r("li",[t._v("有且仅有一个特定的称为根(Root)的节点")]),t._v(" "),r("li",[t._v("当n＞1时，其余结点可以划分为m(m＞0)个互不相交的有限集T1、T2 、…、Tm，每个集Ti(1≤i≤m)均为树，且称为树T的子树(SubTree)。"),r("br"),t._v("\n特别地，不含任何结点(即n＝0)的树，称为"),r("strong",[t._v("空树")]),t._v("。")])]),t._v(" "),r("p",[r("img",{attrs:{src:v(484),alt:"树"}})]),t._v(" "),r("h2",{attrs:{id:"基本术语"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本术语"}},[t._v("#")]),t._v(" 基本术语")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("术语")]),t._v(" "),r("th",[t._v("解释")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[r("strong",[t._v("结点")])]),t._v(" "),r("td",[t._v("存储数据元素和指向子树的链接，由数据元素和构造数据元素之间关系的引用组成。")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("孩子结点")])]),t._v(" "),r("td",[t._v("树中一个结点的子树的根结点称为这个结点的孩子结点，如图中的A的孩子结点有B、C、D")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("双亲结点")])]),t._v(" "),r("td",[t._v("树中某个结点有孩子结点(即该结点的度不为0)，该结点称为它孩子结点的双亲结点，也叫前驱结点。双亲结点和孩子结点是相互的，如图1中，A的孩子结点是B、C、D，B、C、D的双亲结点是A。")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("兄弟结点")])]),t._v(" "),r("td",[t._v("具有相同双亲结点(即同一个前驱)的结点称为兄弟结点，如图中B、B、D为兄弟结点。")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("结点的度")])]),t._v(" "),r("td",[t._v("结点所有子树的个数称为该结点的度，如图A的度为3，B的度为2.")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("树的度")])]),t._v(" "),r("td",[t._v("树中所有结点的度的最大值称为树的度，如图的度为3.")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("叶子结点")])]),t._v(" "),r("td",[t._v("度为0的结点称为叶子结点，也叫终端结点。如图1的K、L、F、G、M、I、J")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("分支结点")])]),t._v(" "),r("td",[t._v("度不为0的结点称为分支结点，也叫非终端结点。如图1的A、B、C、D、E、H")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("结点的层次")])]),t._v(" "),r("td",[t._v("从根结点到树中某结点所经路径的分支数称为该结点的层次。根结点的层次一般为1(也可以自己定义为0)，这样，其它结点的层次是其双亲结点的层次加1.")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("树的深度")])]),t._v(" "),r("td",[t._v("树中所有结点的层次的最大值称为该树的深度(也就是最下面那个结点的层次)。")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("有序树和无序树")])]),t._v(" "),r("td",[t._v("树中任意一个结点的各子树按从左到右是有序的，称为有序树，否则称为无序树。")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("数据元素")])]),t._v(" "),r("td",[t._v("具有相同特性的数据元素的集合。")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("结构关系")])]),t._v(" "),r("td",[t._v("树中数据元素间的结构关系由树的定义确定。")])])])]),t._v(" "),r("h2",{attrs:{id:"基本操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本操作"}},[t._v("#")]),t._v(" 基本操作")]),t._v(" "),r("p",[t._v("树的主要操作有：")]),t._v(" "),r("ul",[r("li",[t._v("（1）创建树IntTree(&T)  创建1个空树T。")]),t._v(" "),r("li",[t._v("（2）销毁树DestroyTree(&T)")]),t._v(" "),r("li",[t._v("（3）构造树CreatTree(&T，deinition)")]),t._v(" "),r("li",[t._v("（4）置空树ClearTree(&T) 将树T置为空树。")]),t._v(" "),r("li",[t._v("（5）判空树TreeEmpty(T)")]),t._v(" "),r("li",[t._v("（6）求树的深度TreeDepth(T)")]),t._v(" "),r("li",[t._v("（7）获得树根Root(T)")]),t._v(" "),r("li",[t._v("（8）获取结点Value(T，cur_e，&e)\n将树中结点cur_e存入e单元中。")]),t._v(" "),r("li",[t._v("（9）数据赋值Assign(T，cur_e，value)\n将结点value，赋值于树T的结点cur_e中。")]),t._v(" "),r("li",[t._v("（10）获得双亲Parent(T，cur_e)\n返回树T中结点cur_e的双亲结点。")]),t._v(" "),r("li",[t._v("（11）获得最左孩子LeftChild(T，cur_e)\n返回树T中结点cur_e的最左孩子。")]),t._v(" "),r("li",[t._v("（12）获得右兄弟RightSibling(T，cur_e)\n返回树T中结点cur_e的右兄弟。")]),t._v(" "),r("li",[t._v("（13）插入子树InsertChild(&T，&p，i，c)\n将树c插入到树T中p指向结点的第i个子树之前。")]),t._v(" "),r("li",[t._v("（14）删除子树DeleteChild(&T，&p，i)\n删除树T中p指向结点的第i个子树。")]),t._v(" "),r("li",[t._v("（15）遍历树TraverseTree(T，visit())")])])])}),[],!1,null,null,null);_.default=e.exports}}]);