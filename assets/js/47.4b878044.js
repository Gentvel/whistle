(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{586:function(t,a,s){"use strict";s.r(a);var n=s(4),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"一、数据结构三要素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、数据结构三要素"}},[t._v("#")]),t._v(" 一、数据结构三要素")]),t._v(" "),s("h3",{attrs:{id:"_1-1-逻辑结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-逻辑结构"}},[t._v("#")]),t._v(" 1.1 逻辑结构")]),t._v(" "),s("p",[t._v("数据元素之间的关系")]),t._v(" "),s("ul",[s("li",[t._v("集合"),s("br"),t._v("\n各个元素同属一个集合，别无其他关系")]),t._v(" "),s("li",[t._v("线性结构\n数据元素之间存在一对一的关系，除了第一个元素，所有元素都有唯一的前驱元素；除了最后一个元素，所有元素都有唯一的后继元素。")]),t._v(" "),s("li",[t._v("树型结构\n树形结构是一对多的关系")]),t._v(" "),s("li",[t._v("图状结构\n图状结构是多对多的关系")])]),t._v(" "),s("h3",{attrs:{id:"_1-2-物理结构（存储结构）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-物理结构（存储结构）"}},[t._v("#")]),t._v(" 1.2 物理结构（存储结构）")]),t._v(" "),s("p",[t._v("用计算机表述数据元素的逻辑关系")]),t._v(" "),s("ul",[s("li",[t._v("顺序存储"),s("br"),t._v("\n把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现，优点：随机访问，缺点：插入删除效率低下，大小固定")]),t._v(" "),s("li",[t._v("链式存储"),s("br"),t._v("\n逻辑上相邻的元素之间在物理位置上可以不相连 优点：大小动态扩展，插入删除效率高，缺点：不能随机访问")]),t._v(" "),s("li",[t._v("索引存储\n存储元素信息的同时，建立附加的索引表，索引表中的每项地址称为索引项，索引项的一般形式是"),s("strong",[t._v("关键字、地址")]),t._v(" ，优点：对顺序查找的一种改进，查找效率高，缺点：需要额外的空间存储索引")]),t._v(" "),s("li",[t._v("散列存储\n根据元素的关键字直接计算出该元素的存储地址，又称为哈希存储 优点：查找基于数据本身即可找到，查找效率高，存取效率高，缺点：存储随机，不便于顺序查找")])]),t._v(" "),s("h3",{attrs:{id:"_1-3-数据的运算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-数据的运算"}},[t._v("#")]),t._v(" 1.3 数据的运算")]),t._v(" "),s("p",[t._v("施加在数据上的运算包括运算的定义和实现，运算的定义是针对逻辑结构的，指出运算的功能；运算的实现是针对存储结构的，指出运算具体操作步骤")]),t._v(" "),s("h2",{attrs:{id:"二、时间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、时间复杂度"}},[t._v("#")]),t._v(" 二、时间复杂度")]),t._v(" "),s("p",[t._v("事前估算算法的时间开销T(n)与问题规模n的关系,时间复杂度的计算并不是计算程序具体运行的时间，而是算法执行语句的次数。\n常见的时间复杂度有：")]),t._v(" "),s("ul",[s("li",[t._v("常数阶O(1),")]),t._v(" "),s("li",[t._v("对数阶O(log2 n),")]),t._v(" "),s("li",[t._v("线性阶O(n),")]),t._v(" "),s("li",[t._v("线性对数阶O(n log2 n),")]),t._v(" "),s("li",[t._v("平方阶O(n^2)，")]),t._v(" "),s("li",[t._v("立方阶O(n^3)")]),t._v(" "),s("li",[t._v("k次方阶O(n^K),")]),t._v(" "),s("li",[t._v("指数阶O(2^n)。")])]),t._v(" "),s("p",[t._v("计算方法")]),t._v(" "),s("ul",[s("li",[t._v("①选取相对增长最高的项")]),t._v(" "),s("li",[t._v("②最高项系数是都化为1")]),t._v(" "),s("li",[t._v("③若是常数的话用O（1）表示")])]),t._v(" "),s("h3",{attrs:{id:"时间复杂度的计算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度的计算"}},[t._v("#")]),t._v(" 时间复杂度的计算")]),t._v(" "),s("p",[t._v("（1）如果算法的执行时间不随着问题规模n的增加而增长，即使算法中有上千条语句，其执行时间也不过是一个较大的常数。此类算法的时间复杂度是O(1)。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("该算法执行次数是10，是一个常数，用时间复杂度表示是O(1)。")]),t._v(" "),s("p",[t._v("（2）当有若干个循环语句时，算法的时间复杂度是由嵌套层数最多的循环语句中最内层语句的频度f(n)决定的。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("该算法for循环，最外层循环每执行一次，内层循环都要执行n次，执行次数是根据n所决定的，时间复杂度是O（n^2）。")]),t._v(" "),s("p",[t._v("（3）循环不仅与n有关，还与执行循环所满足的判断条件有关。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("在此循环，如果arr[i]不等于1的话，时间复杂度是O（n）。如果arr[i]等于1的话，则循环不能执行，时间复杂度是0。")]),t._v(" "),s("h2",{attrs:{id:"三、空间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、空间复杂度"}},[t._v("#")]),t._v(" 三、空间复杂度")]),t._v(" "),s("p",[t._v("空间复杂度是对一个算法在运行过程中临时占用存储空间大小的量度。\n计算方法：")]),t._v(" "),s("ul",[s("li",[t._v("①忽略常数，用O(1)表示")]),t._v(" "),s("li",[t._v("②递归算法的空间复杂度=递归深度N*每次递归所要的辅助空间")]),t._v(" "),s("li",[t._v("③对于单线程来说，递归有运行时堆栈，求的是递归最深的那一次压栈所耗费的空间的个数，因为递归最深的那一次所耗费的空间足以容纳它所有递归过程。")])])])}),[],!1,null,null,null);a.default=r.exports}}]);