(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{591:function(e,t,v){"use strict";v.r(t);var l=v(4),i=Object(l.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h2",{attrs:{id:"二叉查找树api设计"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二叉查找树api设计"}},[e._v("#")]),e._v(" 二叉查找树API设计")]),e._v(" "),v("p",[v("strong",[e._v("成员变量")])]),e._v(" "),v("ol",[v("li",[e._v("private Node root:记录根结点")]),e._v(" "),v("li",[e._v("private int N:记录树中元素的个数")])]),e._v(" "),v("p",[v("strong",[e._v("成员方法")])]),e._v(" "),v("ol",[v("li",[e._v("public void put(Key key,Value value):向树中插入一个键值对")]),e._v(" "),v("li",[e._v("public Value get(Key key):根据key，从树中找出对应的值")]),e._v(" "),v("li",[e._v("public void delete(Key key):根据key，删除树中对应的键值对")]),e._v(" "),v("li",[e._v("public int size():获取树中元素的个数")])]),e._v(" "),v("h2",{attrs:{id:"二叉查找树实现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二叉查找树实现"}},[e._v("#")]),e._v(" 二叉查找树实现")]),e._v(" "),v("p",[e._v("插入方法put实现思想：")]),e._v(" "),v("ol",[v("li",[e._v("如果当前树中没有任何一个结点，则直接把新结点当做根结点使用")]),e._v(" "),v("li",[e._v("如果当前树不为空，则从根结点开始："),v("br"),e._v("\n2.1 如果新结点的key小于当前结点的key，则继续找当前结点的左子结点；"),v("br"),e._v("\n2.2 如果新结点的key大于当前结点的key，则继续找当前结点的右子结点；"),v("br"),e._v("\n2.3 如果新结点的key等于当前结点的key，则树中已经存在这样的结点，替换该结点的value值即可。")])])])}),[],!1,null,null,null);t.default=i.exports}}]);