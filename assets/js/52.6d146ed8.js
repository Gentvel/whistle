(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{594:function(s,a,t){"use strict";t.r(a);var r=t(4),e=Object(r.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"一、位运算基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、位运算基础"}},[s._v("#")]),s._v(" 一、位运算基础")]),s._v(" "),t("p",[s._v("程序中的数在计算机内存中都是以二进制的形式存在的，位运算就是直接对整数在内存中对应的二进制位进行操作。\n十进制转二进制时，采用“除 2 取余，逆序排列”法：")]),s._v(" "),t("ul",[t("li",[s._v("用 2 整除十进制数，得到商和余数;")]),s._v(" "),t("li",[s._v("再用 2 整除商，得到新的商和余数;")]),s._v(" "),t("li",[s._v("重复第 1 和第 2 步，直到商为 0;")]),s._v(" "),t("li",[s._v("将先得到的余数作为二进制数的高位，后得到的余数作为二进制数的低位，依次排序;\n排序结果就是该十进制数的二进制表示。例如十进制数 101 转换为二进制数的计算过程如下：")])]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" 余 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),s._v(" 余 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" 余 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" 余 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" 余 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 余 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" 余 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])])]),t("p",[s._v("逆序排列即二进制中的从高位到低位排序，得到 7 位二进制数为 1100101，如果要转换为 8 位二进制数，就需要在最高位补 0。即十进制数的 8 位二进制数为 01100101。")]),s._v(" "),t("h2",{attrs:{id:"二、原反补码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、原反补码"}},[s._v("#")]),s._v(" 二、原反补码")]),s._v(" "),t("p",[s._v("数值有正负之分，那么仅有 0 和 1 的二进制如何表示正负呢？")]),s._v(" "),t("p",[s._v("人们设定，二进制中最高位为 0 代表正，为 1 则代表负。例如 0000 1100 对应的十进制为 12，而 1000 1100 对应的十进制为 -12。这种表示被称作"),t("strong",[s._v("原码")]),s._v("。但新的问题出现了，原本二进制的最高位始终为 0，为了表示正负又多出了 1，在执行运算时就会出错。举个例子，1 + (-2) 的二进制运算如下：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0010")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" \n")])])]),t("p",[s._v("这显然是有问题的，问题就处在这个代表正负的最高位。接着，人们又弄出了"),t("strong",[s._v("反码")]),s._v("（二进制各位置的 0 与 1 互换，例如 0000 1100 的反码为 1111 0011）。此时，运算就会变成这样：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1101")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1110")]),s._v("\n# 在转换成十进制前，需要再次反码\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])])]),t("p",[s._v("这次好像正确了。但它仍然有例外，我们来看一下 1 + (-1)：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1110")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),t("p",[s._v("零是没有正负之分的，为了解决这个问题，就搞出了补码的概念。"),t("strong",[s._v("补码")]),s._v("是为了让负数变成能够加的正数，所以 负数的补码= 负数的绝对值取反 + 1，例如 -1 的补码为：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 的绝对值 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" # "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 的二进制原码\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1110")]),s._v(" # 原码取反\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v(" # "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 后得到补码\n")])])]),t("p",[s._v("反过来，由补码推导原码的过程为 原码 = 补码 - 1，再求反。要注意的是，反码过程中，最高位的值不变，这样才能够保证结果的正负不会出错。例如 1 + (-6) 和 1 + (-9) 的运算过程如下：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("# "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 的补码 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" 的补码\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1010")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1011")]),s._v(" # 补码运算结果\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1010")]),s._v(" # 对补码减 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("，得到反码\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0101")]),s._v(" # 反码取反，得到原码\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" # 对应的十进制\n\n\n# "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 的补码 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" 的补码\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0111")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" # 补码运算结果\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0111")]),s._v(" # 对补码减 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("，得到反码\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" # 反码取反，得到原码\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" # 对应的十进制\n")])])]),t("div",{staticClass:"custom-block warning"},[t("p",[s._v("正数的补码与原码相同，不需要额外运算。也可以说，补码的出现就是为了解决负数运算时的符号问题。")])]),s._v(" "),t("h2",{attrs:{id:"三、运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、运算符"}},[s._v("#")]),s._v(" 三、运算符")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("名称")]),s._v(" "),t("th",[s._v("符号")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("按位与")]),s._v(" "),t("td",[s._v("&")])]),s._v(" "),t("tr",[t("td",[s._v("按位或")]),s._v(" "),t("td",[t("code",[s._v("|")])])]),s._v(" "),t("tr",[t("td",[s._v("按位异或")]),s._v(" "),t("td",[s._v("^")])]),s._v(" "),t("tr",[t("td",[s._v("按位取反")]),s._v(" "),t("td",[s._v("~")])]),s._v(" "),t("tr",[t("td",[s._v("左移运算")]),s._v(" "),t("td",[s._v("<<")])]),s._v(" "),t("tr",[t("td",[s._v("右移运算")]),s._v(" "),t("td",[s._v(">>")])])])]),s._v(" "),t("h3",{attrs:{id:"_3-1-位与"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-位与"}},[s._v("#")]),s._v(" 3.1 位与")]),s._v(" "),t("p",[s._v("按位与运算将参与运算的两数对应的二进制位相与，当对应的二进制位均为 1 时，结果位为 1，否则结果位为 0。按位与运算的运算符为 &，参与运算的数以补码方式出现。举个例子，将数字 5 和数字 8 进行按位与运算，其实是将数字 5 对应的二进制 0000 0101 和数字 8 对应的二进制 0000 1000 进行按位与运算，即：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0101")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n")])])]),t("p",[s._v("根据按位与的规则，将各个位置的数进行比对。运算过程如下：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0101")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v("\n")])])]),t("p",[s._v("由于它们对应位置中没有“均为 1 ”的情况，所以得到的结果是 0000 0000。\n将结果换算成十进制，得到 0，即 5&8 = 0。")]),s._v(" "),t("h3",{attrs:{id:"_3-2-位或"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-位或"}},[s._v("#")]),s._v(" 3.2 位或")]),s._v(" "),t("p",[s._v("按位或运算将参与运算的两数对应的二进制位相或，只要对应的二进制位中有 1，结果位为 1，否则结果位为 0。按位或运算的运算符为 |。举个例子，将数字 3 和数字 7 进行按位或运算，其实是将数字 3 对应的二进制 0000 0011和数字 7 对应的二进制 0000 0111 进行按位或运算，即：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0111")]),s._v("\n")])])]),t("p",[s._v("根据按位或的规则，将各个位置的数进行比对。运算过程如下：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0111")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0111")]),s._v("\n")])])]),t("p",[s._v("最终得到的结果为 0000 0111。将结果换算成十进制，得到 7，即 3|7 = 7。")]),s._v(" "),t("h3",{attrs:{id:"_3-3-按位异或"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-按位异或"}},[s._v("#")]),s._v(" 3.3 按位异或")]),s._v(" "),t("p",[s._v("按位异或运算将参与运算的两数对应的二进制位相异或，当对应的二进制位值不同时，结果位为 1，否则结果位为 0。按位异或的运算符为 ^，参与运算的数以补码方式出现。举个例子，将数字 12 和数字 7 进行按位异或运算，其实是将数字 12 对应的二进制 0000 1100 和数字 7 对应的二进制 0000 0111 进行按位异或运算，即：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1100")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0111")]),s._v("\n")])])]),t("p",[s._v("根据按位异或的规则，将各个位置的数进行比对。运算过程如下：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1100")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0111")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1011")]),s._v("\n")])])]),t("p",[s._v("最终得到的结果为 0000 1011。将结果换算成十进制，得到 11，即 12^7 = 11。")]),s._v(" "),t("h3",{attrs:{id:"_3-4-按位取反"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-按位取反"}},[s._v("#")]),s._v(" 3.4 按位取反")]),s._v(" "),t("p",[s._v("按位取反运算将二进制数的每一个位上面的 0 换成 1，1 换成 0。按位取反的运算符为 ~，参与运算的数以补码方式出现。举个例子，对数字 9 进行按位取反运算，其实是将数字 9 对应的二进制 0000 1001 进行按位取反运算，即：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("～"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),s._v(" # 补码，正数补码即原码\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1010")]),s._v(" # 取反\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n")])])]),t("p",[s._v("最终得到的结果为 -10。再来看一个例子，-20 按位取反的过程如下：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("～"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0100")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1110")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1100")]),s._v(" # 补码\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0011")]),s._v(" # 取反\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v("\n")])])]),t("p",[s._v("最终得到的结果为 19。我们从示例中找到了规律，按位取反的结果用数学公式表示：")]),s._v(" "),t("p",[t("code",[s._v("～x = -(x + 1)")]),s._v("\n我们可以将其套用在 9 和 -20 上：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("～"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v("\n")])])]),t("p",[s._v("这个规律也可以作用于数字 0 上，即 ~0 = -(0 + 1) = -1。")]),s._v(" "),t("h3",{attrs:{id:"_3-5-左移运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-左移运算"}},[s._v("#")]),s._v(" 3.5 左移运算")]),s._v(" "),t("p",[s._v("左移运算将数对应的二进位全部向左移动若干位，高位丢弃，低位补 0。左移运算的运算符为 <<。举个例子，将数字 5 左移 4 位，其实是将数字 5 对应的二进制 0000 0101 中的二进位向左移动 4 位，即：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0101")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0101")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" # 高位丢弃，低位补 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n")])])]),t("p",[s._v("最终结果为 80。这等效于:"),t("code",[s._v("x << n = x * (2) ^ n")])]),s._v(" "),t("h3",{attrs:{id:"_3-6-右移运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-右移运算"}},[s._v("#")]),s._v(" 3.6 右移运算")]),s._v(" "),t("p",[s._v("右移运算将数对应的二进位全部向右移动若干位。对于左边的空位，如果是正数则补 0，负数可能补 0 或 1 （Turbo C 和很多编译器选择补 1）。右移运算的运算符为 >>。举个例子，将数字 80 右移 4 位，其实是将数字 80 对应的二进制 0101 0000 中的二进位向右移动 4 位，即：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0101")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0101")]),s._v(" # 正数补"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("，负数补"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n")])])]),t("p",[s._v("最终结果为 5。这等效于："),t("code",[s._v("x >> n = x / (2) ^ n")])]),s._v(" "),t("h2",{attrs:{id:"四、位运算的应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、位运算的应用"}},[s._v("#")]),s._v(" 四、位运算的应用")]),s._v(" "),t("h3",{attrs:{id:"_4-1-判断数字奇偶"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-判断数字奇偶"}},[s._v("#")]),s._v(" 4.1 判断数字奇偶")]),s._v(" "),t("p",[s._v("通常，我们会通过取余来判断数字是奇数还是偶数。例如判断 101 的奇偶用的方法是：")]),s._v(" "),t("div",{staticClass:"language-python extra-class"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'偶数'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'奇数'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("也可以通过位运算中的按位与来实现奇偶判断，例如：")]),s._v(" "),t("div",{staticClass:"language-python extra-class"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'奇数'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'偶数'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("这是因为奇数的二进制最低位始终为 1，而偶数的二进制最低为始终为 0。所以，无论任何奇数与 1 即 0000 0001 相与得到的都是 1，任何偶数与其相与得到的都是 0。")]),s._v(" "),t("h3",{attrs:{id:"_4-2-变量交换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-变量交换"}},[s._v("#")]),s._v(" 4.2 变量交换")]),s._v(" "),t("div",{staticClass:"language-python extra-class"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python")]),s._v("\na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" b\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" b\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" b\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("h3",{attrs:{id:"_4-3-求-x-与-2-的-n-次方乘积"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-求-x-与-2-的-n-次方乘积"}},[s._v("#")]),s._v(" 4.3 求 x 与 2 的 n 次方乘积")]),s._v(" "),t("p",[s._v("设一个数为 x，求 x 与 2 的 n 次方乘积。这用数学来计算都是非常简单的："),t("code",[s._v("x << n = x * (2) ^ n")]),s._v(",在位运算中，要实现这个需求只需要用到左移运算，即 x << n。")])])}),[],!1,null,null,null);a.default=e.exports}}]);