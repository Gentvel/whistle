(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{625:function(t,a,s){"use strict";s.r(a);var v=s(4),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"一、缓存特征"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、缓存特征"}},[t._v("#")]),t._v(" 一、缓存特征")]),t._v(" "),s("h3",{attrs:{id:"命中率"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命中率"}},[t._v("#")]),t._v(" 命中率")]),t._v(" "),s("p",[t._v("当某个请求能够通过访问而得到响应数据时，称为缓存命中。\n缓存命中率越高，缓存的利用率也就越高。")]),t._v(" "),s("h3",{attrs:{id:"最大空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最大空间"}},[t._v("#")]),t._v(" 最大空间")]),t._v(" "),s("p",[t._v("缓存通常位于内存中，内存的空间通常比磁盘空间小的多，因此缓存的最大空间不可能非常大。")]),t._v(" "),s("p",[t._v("当缓存存放的数据量超过最大空间时，就需要淘汰部分数据来存放新到达的数据。")]),t._v(" "),s("h3",{attrs:{id:"淘汰策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#淘汰策略"}},[t._v("#")]),t._v(" 淘汰策略")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("FIFO（First In First Out）：先进先出策略，在实时性的场景下，需要经常访问最新的数据，那么就可以使用 FIFO，使得最先进入的数据（最晚的数据）被淘汰。")])]),t._v(" "),s("li",[s("p",[t._v("LRU（Least Recently Used）：淘汰最近最久未使用策略，优先淘汰最久未使用的数据，也就是上次被访问时间距离现在最久的数据。该策略可以保证内存中的数据都是热点数据，也就是经常被访问的数据，从而保证缓存命中率。")])]),t._v(" "),s("li",[s("p",[t._v("LFU（Least Frequently Used）：淘汰最不经常使用策略，优先淘汰一段时间内使用次数最少的数据。")])])]),t._v(" "),s("h2",{attrs:{id:"二、缓存位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、缓存位置"}},[t._v("#")]),t._v(" 二、缓存位置")]),t._v(" "),s("h3",{attrs:{id:"浏览器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器"}},[t._v("#")]),t._v(" 浏览器")]),t._v(" "),s("p",[t._v("当 HTTP 响应允许进行缓存时，浏览器会将 HTML、CSS、JavaScript、图片等静态资源进行缓存。")]),t._v(" "),s("h3",{attrs:{id:"isp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#isp"}},[t._v("#")]),t._v(" ISP")]),t._v(" "),s("p",[t._v("网络服务提供商（ISP）是网络访问的第一跳，通过将数据缓存在 ISP 中能够大大提高用户的访问速度。")]),t._v(" "),s("h3",{attrs:{id:"反向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反向代理"}},[t._v("#")]),t._v(" 反向代理")]),t._v(" "),s("p",[t._v("反向代理位于服务器之前，请求与响应都需要经过反向代理。通过将数据缓存在反向代理，在用户请求反向代理时就可以直接使用缓存进行响应。")]),t._v(" "),s("h3",{attrs:{id:"本地缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地缓存"}},[t._v("#")]),t._v(" 本地缓存")]),t._v(" "),s("p",[t._v("使用 Guava Cache 将数据缓存在服务器本地内存中，服务器代码可以直接读取本地内存中的缓存，速度非常快。")]),t._v(" "),s("h3",{attrs:{id:"分布式缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分布式缓存"}},[t._v("#")]),t._v(" 分布式缓存")]),t._v(" "),s("p",[t._v("使用 Redis、Memcache 等分布式缓存将数据缓存在分布式缓存系统中。")]),t._v(" "),s("p",[t._v("相对于本地缓存来说，分布式缓存单独部署，可以根据需求分配硬件资源。不仅如此，服务器集群都可以访问分布式缓存，而本地缓存需要在服务器集群之间进行同步，实现难度和性能开销上都非常大。")]),t._v(" "),s("h3",{attrs:{id:"数据库缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据库缓存"}},[t._v("#")]),t._v(" 数据库缓存")]),t._v(" "),s("p",[t._v("MySQL 等数据库管理系统具有自己的查询缓存机制来提高查询效率。")]),t._v(" "),s("h3",{attrs:{id:"java-内部的缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-内部的缓存"}},[t._v("#")]),t._v(" Java 内部的缓存")]),t._v(" "),s("p",[t._v("Java 为了优化空间，提高字符串、基本数据类型包装类的创建效率，设计了字符串常量池及 Byte、Short、Character、Integer、Long、Boolean 这六种包装类缓冲池。")]),t._v(" "),s("h3",{attrs:{id:"cpu-多级缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cpu-多级缓存"}},[t._v("#")]),t._v(" CPU 多级缓存")]),t._v(" "),s("p",[t._v("CPU 为了解决运算速度与主存 IO 速度不匹配的问题，引入了多级缓存结构，同时使用 MESI 等缓存一致性协议来解决多核 CPU 缓存数据一致性的问题。")]),t._v(" "),s("h3",{attrs:{id:"三、cdn"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、cdn"}},[t._v("#")]),t._v(" 三、CDN")]),t._v(" "),s("p",[t._v("内容分发网络（Content distribution network，CDN）是一种互连的网络系统，它利用更靠近用户的服务器从而更快更可靠地将 HTML、CSS、JavaScript、音乐、图片、视频等静态资源分发给用户。")]),t._v(" "),s("p",[t._v("CDN 主要有以下优点：")]),t._v(" "),s("ul",[s("li",[t._v("更快地将数据分发给用户；")]),t._v(" "),s("li",[t._v("通过部署多台服务器，从而提高系统整体的带宽性能；")]),t._v(" "),s("li",[t._v("多台服务器可以看成是一种冗余机制，从而具有高可用性。")])]),t._v(" "),s("h2",{attrs:{id:"四、缓存问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、缓存问题"}},[t._v("#")]),t._v(" 四、缓存问题")]),t._v(" "),s("h3",{attrs:{id:"_4-1-缓存穿透"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-缓存穿透"}},[t._v("#")]),t._v(" 4.1 缓存穿透")]),t._v(" "),s("p",[t._v("指的是对某个一定不存在的数据进行请求，该请求将会穿透缓存到达数据库。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("解决方案")]),t._v(" "),s("ul",[s("li",[t._v("对这些不存在的数据缓存一个空数据")]),t._v(" "),s("li",[t._v("对这类请求进行过滤")])])]),t._v(" "),s("h3",{attrs:{id:"_4-2-缓存雪崩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-缓存雪崩"}},[t._v("#")]),t._v(" 4.2 缓存雪崩")]),t._v(" "),s("p",[t._v("指的是由于数据没有被加载到缓存中，或者缓存数据在同一时间大面积失效（过期），又或者缓存服务宕机。导致大量的请求都到达数据库。在有缓存的系统中，系统非常依赖于缓存，缓存分担了很大一部分的数据请求。当发生缓存雪崩时，数据库无法处理这么大的请求，导致数据库崩溃。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("解决方案")]),t._v(" "),s("ul",[s("li",[t._v("为了防止缓存在同一时间大面积过期导致缓存雪崩的情况，可以通过观察用户行为，合理设置缓存过期时间来实现")]),t._v(" "),s("li",[t._v("为了防止缓存服务器宕机出现缓存雪崩的情况，可以使用分布式缓存，分布式缓存中每一个节点只缓存部分的数据，当某个节点宕机时可以保证其他节点的缓存仍然可用")]),t._v(" "),s("li",[t._v("进行缓存预热，避免在系统刚启动不久由于未将大量的数据进行缓存而导致缓存雪崩")])])]),t._v(" "),s("h3",{attrs:{id:"_4-3-缓存一致性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-缓存一致性"}},[t._v("#")]),t._v(" 4.3 缓存一致性")]),t._v(" "),s("p",[t._v("缓存一致性要求数据更新的同时缓存数据也能够实时更新。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("解决方案")]),t._v(" "),s("ul",[s("li",[t._v("在数据更新的同时立即去更新缓存")]),t._v(" "),s("li",[t._v("在读缓存之前先判断缓存是否是最新的，如果不是最新的先进行更新")])])]),t._v(" "),s("p",[t._v("要保证缓存一致性需要付出很大的代价，缓存数据最好是那些对一致性要求不高的数据，允许缓存数据存在一些脏数据。")]),t._v(" "),s("h3",{attrs:{id:"_4-4-缓存-无底洞-现象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-缓存-无底洞-现象"}},[t._v("#")]),t._v(" 4.4 缓存 “无底洞” 现象")]),t._v(" "),s("p",[t._v("指的是为了满足业务要求添加了大量缓存节点，但是性能不但没有好转反而下降了的现象。")]),t._v(" "),s("p",[t._v("产生原因：缓存系统通常采用 hash 函数将 key 映射到对应的缓存节点，随着缓存节点数目的增加，键值分布到更多的节点上，导致客户端一次批量操作会涉及多次网络操作，这意味着批量操作的耗时会随着节点数目的增加而不断增大。此外，网络连接数变多，对节点的性能也有一定影响。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("解决方案")]),t._v(" "),s("ul",[s("li",[t._v("优化批量数据操作命令；")]),t._v(" "),s("li",[t._v("减少网络通信次数；")]),t._v(" "),s("li",[t._v("降低接入成本，使用长连接 / 连接池，NIO 等。")])])])])}),[],!1,null,null,null);a.default=_.exports}}]);