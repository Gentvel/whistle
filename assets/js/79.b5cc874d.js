(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{629:function(e,s,t){"use strict";t.r(s);var a=t(4),r=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"redis中的数据特征"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis中的数据特征"}},[e._v("#")]),e._v(" redis中的数据特征")]),e._v(" "),t("p",[e._v("Redis是一种内存级别的数据库，所有数据均放在内存中，内存中的数据可以通过TTL指令获取其状态")]),e._v(" "),t("ul",[t("li",[e._v("XX:具有时效性的数据，表示剩余的时间")]),e._v(" "),t("li",[e._v("-1：永久有效的数据")]),e._v(" "),t("li",[e._v("-2：已经过期的数据或被删除的数据")])]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" ttl name "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#不存在的数据")]),e._v("\n-2\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" name "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("12")]),e._v("\nOK\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" expire name "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("30")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" ttl name "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 剩余过期时间")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("24")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" age "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("12")]),e._v("\nOK\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" ttl age "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#永久有效的数据")]),e._v("\n-1\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" ttl name "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#过期")]),e._v("\n-2\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" get name "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#过期后获取不到")]),e._v("\nnull\n")])])]),t("p",[e._v("可以看到在设置过期后，超过时间后，将获取不到该值。但是，在高并发下，每秒可能有几万或几十万的指令等待处理，这时候cpu在处理前段的指令会突然增加使用率，然后达到峰值后将会按照指令队列一个个处理，CPU的使用率突然下降。那么这时候，redis就会协调当前任务，将过期删除键值的任务延后。")]),e._v(" "),t("p",[t("strong",[e._v("那么延后的删除时怎么删除的呢？")])]),e._v(" "),t("h2",{attrs:{id:"删除策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除策略"}},[e._v("#")]),e._v(" 删除策略")]),e._v(" "),t("h3",{attrs:{id:"定时删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定时删除"}},[e._v("#")]),e._v(" 定时删除")]),e._v(" "),t("p",[e._v("创建一个定时器，当key设置有过期时间，且过期时间到达时，由定时器任务立即执行对键的删除操作")]),e._v(" "),t("p",[t("strong",[e._v("优点")]),t("br"),e._v("\n节约内存，到时就删除，快速释放掉不必要的内存占用"),t("br"),e._v(" "),t("strong",[e._v("缺点")]),t("br"),e._v("\nCPU压力很大，无论CPU此时负载量多高，均占用CPU，会影响redis服务器响应时间和指令吞吐量")]),e._v(" "),t("h3",{attrs:{id:"惰性删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#惰性删除"}},[e._v("#")]),e._v(" 惰性删除")]),e._v(" "),t("p",[e._v("数据到达过期时间，不做处理，等下次访问该数据时删除。")]),e._v(" "),t("ul",[t("li",[e._v("如果未过期，返回数据")]),e._v(" "),t("li",[e._v("发现已过期，删除该数据，返回不存在")])]),e._v(" "),t("p",[t("strong",[e._v("优点")]),t("br"),e._v("\n节约CPU性能，在发现必须要删除的时候才删除"),t("br"),e._v(" "),t("strong",[e._v("缺点")]),t("br"),e._v("\n内存压力大，如果某个数据过期且长时间未调用那么就会出现长期占用内存的情况")]),e._v(" "),t("h3",{attrs:{id:"定期删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定期删除"}},[e._v("#")]),e._v(" 定期删除")]),e._v(" "),t("p",[e._v("Redis启动服务器初始化的时候，读取配置server.hz的值，默认为10")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Server")]),e._v("\nredis_version:6.0.6\nredis_git_sha1:00000000\nredis_git_dirty:0\nredis_build_id:19d4277f1e8a2fed\nredis_mode:standalone\nos:Linux "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.10")]),e._v(".0-1127.18.2.el7.x86_64 x86_64\narch_bits:64\nmultiplexing_api:epoll\natomicvar_api:atomic-builtin\ngcc_version:8.3.0\nprocess_id:1\nrun_id:34926c9a8f577eb22ba21c50dfea8f30932e6de4\ntcp_port:6379\nuptime_in_seconds:77176\nuptime_in_days:0\nhz:10 "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("###")]),e._v("\nconfigured_hz:10\nlru_clock:13088228\nexecutable:/data/redis-server\nconfig_file:/etc/redis/redis.conf\n")])])]),t("p",[e._v("这个值是控制每秒钟调用server.hz次"),t("font",{attrs:{color:"#0099ff",face:"黑体"}},[e._v("serverCron()")]),e._v("函数，serverCron()函数顾名思义就可以知道是一个定时任务，而个函数调用的"),t("font",{attrs:{color:"#0099ff",face:"黑体"}},[e._v("databaseCron()")]),e._v("函数是轮询每个库（redis分为16个库），轮询操作是用来调用"),t("font",{attrs:{color:"#0099ff",face:"黑体"}},[e._v("activeExpireCycle()")]),e._v("这个函数。")],1),e._v(" "),t("p",[e._v("而activeExpireCycle对每个库中的对应的expires数组进行测，每次执行250ms/server.hz这时间")]),e._v(" "),t("p",[e._v("对某个expires[*]进行检测时，随机挑选W个key检测，检测除key\n【W=ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP属性值（配置文件设定）】")]),e._v(" "),t("ul",[t("li",[e._v("如果超时，那么就删除key。")]),e._v(" "),t("li",[e._v("如果一轮中删除的key的数量大于W*25%，那么就循环该过程，再次检测当前库。")]),e._v(" "),t("li",[e._v("如果一轮中删除key的数量小于W*25%，那么检查下一个库的expires。")])]),e._v(" "),t("p",[e._v("简而言之，databaseCron（）是对多个库的检查，activeExpireCycle()是对单个库做检查，serverCron()是每秒执行多少次")]),e._v(" "),t("p",[e._v("如果在activeExpireCycle()调用时，检测时间到期了，那么会将当前的库名存储到参数current_db记录，下次从current_db继续轮询执行")]),e._v(" "),t("p",[e._v("定期删除是周期性轮询redis库中时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度")]),e._v(" "),t("p",[t("strong",[e._v("特点")])]),e._v(" "),t("ul",[t("li",[e._v("CPU性能占用设置有峰值，检测频度可自定义设置")]),e._v(" "),t("li",[e._v("内存压力不是很大，长期占用内存的冷数据会被持续清理")])]),e._v(" "),t("h2",{attrs:{id:"逐出算法（淘汰算法）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逐出算法（淘汰算法）"}},[e._v("#")]),e._v(" 逐出算法（淘汰算法）")]),e._v(" "),t("p",[e._v("当新数据进入redis时，如果内存不住怎么办？")]),e._v(" "),t("p",[e._v("Redis存储数据时，在执行每一个命令前，会调用freeMemoryIfNeed()检测内存是否充足。如果内存不满足新加入数据的最低存储要求，redis要临时删除一些数据为当前指令清理存储空间。清理数据的策略成为逐出算法。")]),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("注意")]),e._v(" "),t("p",[e._v("逐出数据的过程不是100%能够清理出足够的可使用的内存空间，如果不成功则反复执行。当对所有数据尝试完毕后，如果不能达到内存清理的要求，将出现错误信息\n"),t("code",[e._v("(error) OOM command not allowed when used memory>maxmemory")])])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("最大可使用内存"),t("br"),e._v(" "),t("code",[e._v("maxmemory")]),t("br"),e._v("\n是在配置和文件中设置的，表示占用物理内存的比例，默认为0，表示不限制。生产环境中根据需求设定，通常设置在50%以上。")])]),e._v(" "),t("li",[t("p",[e._v("每次选取待删除数据的个数"),t("br"),e._v(" "),t("code",[e._v("maxmemory-sample")]),t("br"),e._v("\n选取数据时不会全库扫描，导致严重的性能消耗，降低读写性能。因此采用随机获取数据的方式作为待检测删除数据")])]),e._v(" "),t("li",[t("p",[e._v("删除策略"),t("br"),e._v(" "),t("code",[e._v("maxmemory-policy")]),t("br"),e._v("\n达到最大内存后，对被挑选出来的数据进行删除的策略")])])]),e._v(" "),t("h3",{attrs:{id:"影响数据逐出的配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#影响数据逐出的配置"}},[e._v("#")]),e._v(" 影响数据逐出的配置")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("检测容易失效的数据（可能会过期的数据集，也就是在server.db[i].expires）")])])]),e._v(" "),t("ol",[t("li",[e._v("volatile-lru(Least Recently Used):挑选最长时间没有使用的数据淘汰")]),e._v(" "),t("li",[e._v("volatile-lfu(Least Frequently Used):挑选最近使用次数最少的数据淘汰")]),e._v(" "),t("li",[e._v("volatile-ttl：挑选将要过期的数据淘汰")]),e._v(" "),t("li",[e._v("volatile-random：随机选择数据淘汰")])]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("检测全库数据（所有数据集server.db[i].dict）")])])]),e._v(" "),t("ol",[t("li",[e._v("allkeys-lru: 挑选最长时间没有使用的数据淘汰")]),e._v(" "),t("li",[e._v("allkeys-lfu：挑选最近使用次数最少的数据淘汰")]),e._v(" "),t("li",[e._v("allkeys-random: 随机选择数据淘汰")])]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("放弃数据驱逐")])])]),e._v(" "),t("ol",[t("li",[e._v("no-enviction:禁止驱逐数据（redis4.0中默认策略），会引发OOM")])]),e._v(" "),t("h3",{attrs:{id:"数据逐出策略配置依据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据逐出策略配置依据"}},[e._v("#")]),e._v(" 数据逐出策略配置依据")]),e._v(" "),t("p",[e._v("使用INFO指令输出监控信息，查询缓存hit和miss次数，根据业务需求调优redis配置")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##persistence")]),e._v("\nactive_defrag_hits:0\nactive_defrag_misses:0\nactive_defrag_key_hits:0\nactive_defrag_key_misses:0\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);